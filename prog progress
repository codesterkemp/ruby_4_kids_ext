class Bullet
    attr_reader :x, :y

    def initialize(window)
        @window = window
        @icon = Gosu::Image.new(@window, 'bullet.png', true)
        @y = 0
        @x = rand(@window.width)
    end
   
    def update
        @y = @y + 10
        if @y > @window.width
            @y = 0
            @x = rand(@window.width)   
        end
    end
   
    def draw
        @icon.draw(@x, @y, 3)
    end
end


********************************************

require 'gosu'
require_relative 'window'
require_relative 'player'
require_relative 'bullet'

window = Window.new
window.show

********************************************

class Window < Gosu::Window

    def initialize
        super(300,300,false)
        @player = Player.new(self)
        @bullet = Bullet.new(self)
    end
   
    def update
        if button_down? Gosu::Button::KbLeft
            @player.move_left
        end
        if button_down? Gosu::Button::KbRight
            @player.move_right
        end
        @bullet.update
    end
   
    def draw
        @player.draw
        @bullet.draw
    end
   
end

************************************************

class Player
    def initialize(window)
        @window = window
        @icon = Gosu::Image.new(@window, "player.png", true)
        @x = 0
        @y = window.height - 80
    end
   
    def move_right
        @x = @x + 10
        if @x > @window.width-50
            @x = @window.width-50
        end
    end
   
    def move_left
        @x = @x - 10
        if @x < 0
            @x = 0
        end
    end
   
    def draw
        @icon.draw(@x,@y,1)
    end
end

**********************************************************
**********************************************************

class Player
    def initialize(window)
        @window = window
        @icon = Gosu::Image.new(@window, "player.png", true)
        @x = 0
        @y = window.height - 80
        @explosion = Gosu::Image.new(@window, "explosion.png", true)
        @exploded = false
    end
   
    def move_right
        @x = @x + 10
        if @x > @window.width-50
            @x = @window.width-50
        end
    end
   
    def move_left
        @x = @x - 10
        if @x < 0
            @x = 0
        end
    end
   
    def draw
        if @exploded
            @explosion.draw(@x, @y, 4)
        else
            @icon.draw(@x,@y,1)
        end
    end
   
    def hit_by?(bullet)
        if Gosu::distance(bullet.x, bullet.y, @x, @y) < 20
            @exploded = true
        end
    end
   
end
*************************************************************

class Window < Gosu::Window

    def initialize
        super(300,300,false)
        @player = Player.new(self)
        @bullet = Bullet.new(self)
    end
   
    def update
        if @player.hit_by? @bullet
            #end of game
        else
            if button_down? Gosu::Button::KbLeft
                @player.move_left
            end
            if button_down? Gosu::Button::KbRight
                @player.move_right
            end
            @bullet.update
        end
    end
   
    def draw
        @player.draw
        @bullet.draw
    end
   
end

***************************************************
***************************************************
def hit_by?(bullets)
    @exploded =  bullets.any? {|bullet| Gosu::distance(bullet.x, bullet.y, @x, @y) < 20}
  end
end


**************************************************


  def initialize
    super(300,300,false)
    @player = Player.new(self)
    @bullets = [Bullet.new(self), Bullet.new(self)]
  end

  def update
    if @player.hit_by? @bullets
      #end of game
    else
      if button_down? Gosu::Button::KbLeft
        @player.move_left
      end
      if button_down? Gosu::Button::KbRight
        @player.move_right
      end
      @bullets.each {|bullet| bullet.update}
    end
  end

  def draw
    @player.draw
    @bullets.each {|bullet| bullet.draw}
  end
end

************************************************
************************************************

class Window < Gosu::Window

    def initialize
        super(300,300,false)
        @player = Player.new(self)
        @bullets = [Bullet.new(self), Bullet.new(self)]
        @bullets = 5.times.map {Bullet.new(self)}
        @running = true
    end
   
    def update
        if @running
            if @player.hit_by? @bullets
                @running = false
            else
                run_game
            end
        end
       
        if @running == false and button_down? Gosu::Button::KbR
            @running = true
            @player.reset_position
        end
    end
   
    def run_game
        if button_down? Gosu::Button::KbLeft
            @player.move_left
        end
        if button_down? Gosu::Button::KbRight
            @player.move_right
        end
        @bullets.each {|bullet| bullet.update}
    end
   
    def draw
        @player.draw
        @bullets.each {|bullet| bullet.draw}
    end
   
end

